#!/usr/bin/env python
import rospy
import actionlib

from mdr_push_action.msg import PushAction
from mdr_push_action.action_states import PushSM

class PushServer(object):
    def __init__(self):
        move_arm_server = rospy.get_param('~move_arm_server', 'move_arm_server')
        move_base_server = rospy.get_param('~move_base_server', 'move_base_server')
        gripper_controller_pkg_name = rospy.get_param('~gripper_controller_pkg_name',
                                                      'mdr_gripper_controller')
        pregrasp_config_name = rospy.get_param('~pregrasp_config_name', 'pregrasp')
        grasp_offset = float(rospy.get_param('~intermediate_grasp_offset', -1.))
        safe_arm_joint_config = rospy.get_param('~safe_arm_joint_config', 'folded')
        base_elbow_offset = float(rospy.get_param('~base_elbow_offset', -1.))
        arm_base_offset = float(rospy.get_param('~arm_base_offset', -1.))
        grasping_orientation = rospy.get_param('~grasping_orientation', list())
        grasping_dmp = rospy.get_param('~grasping_dmp', '')
        dmp_tau = float(rospy.get_param('~dmp_tau', 1.))
        number_of_retries = int(rospy.get_param('~number_of_retries', 0))

        rospy.loginfo('[push] Initialising state machine')
        self.action_sm = PushSM(move_arm_server=move_arm_server,
                                  move_base_server=move_base_server,
                                  gripper_controller_pkg_name=gripper_controller_pkg_name,
                                  pregrasp_config_name=pregrasp_config_name,
                                  intermediate_grasp_offset=grasp_offset,
                                  safe_arm_joint_config=safe_arm_joint_config,
                                  base_elbow_offset=base_elbow_offset,
                                  arm_base_offset=arm_base_offset,
                                  grasping_orientation=grasping_orientation,
                                  grasping_dmp=grasping_dmp,
                                  dmp_tau=dmp_tau,
                                  number_of_retries=number_of_retries)
        rospy.loginfo('[push] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('push_server',
                                                          PushAction, self.execute, False)
        self.action_server.start()
        rospy.loginfo('push action server ready')

    def execute(self, goal):
        rospy.loginfo('[push] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

if __name__ == '__main__':
    rospy.init_node('push_server')
    push_server = PushServer()
    try:
        push_server.action_sm.run()
        while push_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(push_server.action_sm.name))
        push_server.action_sm.stop()