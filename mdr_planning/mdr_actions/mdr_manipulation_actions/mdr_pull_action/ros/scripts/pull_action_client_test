#! /usr/bin/env python
from __future__ import print_function
import rospy
import actionlib
import numpy as np

from mdr_pull_action.msg import PullAction, PullGoal

def distribution(occurrence, bins):
    probabilities = []
    bin_size = (bins[1]-bins[0])/6
    init_val = bins[0]
    for i in range(5):
        prob = bin_size*occurrence[i]
        probabilities.append(prob)
    probabilities.append(1-np.sum(probabilities))
    rdm_num = np.random.choice(range(6), p=probabilities)
    chosen_num = np.random.uniform(init_val+(bin_size*rdm_num),init_val+(bin_size*(rdm_num+1)))
    return chosen_num


if __name__ == '__main__':
    rospy.init_node('pull_action_client_test')

    client = actionlib.SimpleActionClient('/pull_server', PullAction)
    client.wait_for_server()

    goal = PullGoal()
    goal.pose.header.frame_id = 'base_link'
    goal.pose.header.stamp = rospy.Time.now()

    x_0 = np.array([32.06432054, 16.03216027, 40.08040067, 0, 0, 8.01608013])
    x_1 = np.array([0.43498565, 0.49736027])

    y_0 = np.array([13.51563889, 27.03127777, 0, 27.03127777, 54.06255555, 40.54691666])
    y_1 = np.array([0.05675844, 0.09375263])

    z_0 = np.array([109.2043287, 27.30108217, 27.30108217, 54.60216435, 81.90324652, 27.30108217])
    z_1 = np.array([0.80388078, 0.82219507])

    goal.pose.pose.position.x = distribution(x_0, x_1)
    goal.pose.pose.position.y = distribution(y_0, y_1)
    goal.pose.pose.position.z = distribution(z_0, z_1)

    print(str(goal.pose.pose.position.x) + ', ' + str(goal.pose.pose.position.y) + ', ' + str(goal.pose.pose.position.z))

    goal.pose.pose.orientation.x = 0.758
    goal.pose.pose.orientation.y = 0.000
    goal.pose.pose.orientation.z = 0.652
    goal.pose.pose.orientation.w = 0.000

    timeout = 15.0
    rospy.loginfo('Sending action lib goal to pull_server')
    client.send_goal(goal)
    client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
    print(client.get_result())

